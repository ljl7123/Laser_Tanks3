<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>-1</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//Note, this object is persistant throughout the rooms (except for arena, check step event)

//tile int
tile_timer_init();

//This is the variable that will store a title block instance from a random
//point in the room 
to_be_exploded = noone;

//block timer
block_timer_default = 4 * per_second;
block_timer = block_timer_default;

//explosion timer init
explosion_timer_default = 150 * per_second;
explosion_timer = explosion_timer_default;

//searchlights for title screen
searchlight1 = instance_create(room_width/2, room_height + 50, object_flashlight); // this one starts at 0 degrees
searchlight2 = instance_create(room_width/2, room_height + 50, object_flashlight); // this one starts at -180 degrees
searchlight1.image_blend = c_yellow;
searchlight2.image_blend = searchlight1.image_blend;
searchlight2.image_angle = image_angle - 180;

//searchlights timer init
searchlight_timer_default = per_second / 60;
searchlight_timer = searchlight_timer_default;





</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//Persistant accross rooms because we want to preserve the position of the falling blocks
//and the explosions

//destroy this object
//if we enter the arena
if (room == 3){
    //show_debug_message("entering the arena");
    //Calling the function with no arguments will simply destroy the instance that is currently in scope and running the code
    instance_destroy();
}

//make sure the size of the view is consistant across rooms because
//this logic object is persistant, and the view changes size across rooms.
//It needs to be consistant because of the generate_tiles() script

//(If not the title screen or the arena screen)
if (room != room_first &amp;&amp; room != 3){
   view_wview[0] = 2560;
   view_hview[0] = 2560;
}

//generate the tiles
generate_tiles();

//create a block
if (block_timer &lt;=0){
    block_timer = block_timer_default;
    instance_create(irandom_range(0, room_width), -100, object_block_title);
}
//create an explosion with a random color at a random position on the screen
if (instance_exists(object_block_title &amp;&amp; explosion_timer &lt;=0)){
    explosion_timer = explosion_timer_default;
    to_be_exploded = instance_nearest(random_range(100, room_width-100), random_range(250, room_height-100), object_block_title);
    if (instance_exists(to_be_exploded)){
        to_be_exploded.hp = 0;
    }
}

//searchlight movement on a timer
if (searchlight_timer &lt; 0){
    searchlight_timer = searchlight_timer_default;
    //only attempt to alter these searchlights if we are in the title screen, because otherwise
    //the will be destroyed and cause a memory error
    if (room ==0){
        searchlight1.image_angle += 1;
        searchlight2.image_angle -= 1;
    }
}

//decrease all timers 
block_timer -= per_second;
explosion_timer -=per_second;
searchlight_timer -= per_second;



</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//Set the draw color to white to avoid
//graphical glitch that changes the text to black
//on restart.
draw_set_colour(c_white);

//only draw this stuff if we are in room zero
if (room == 0){
    //title
        if (menu_element(true, "Laser Tanks", room_width/2, room_height/2, font_pixel, 2, true, c_white )){
            room_goto_next();
        }
    //credits
            menu_element(true, "A Rolo Games Production", room_width/2, room_height/2 + 200, font_pixel, 1, true, c_white);
    }
    
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
