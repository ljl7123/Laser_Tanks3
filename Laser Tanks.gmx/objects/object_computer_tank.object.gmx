<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>sprite_tank</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>object_tank_parent</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>event_inherited();

//accelerate in a random direction
h_acceleration = choose(0,-3, 3);
v_acceleration = choose(0,-3, 3);

//timer for choosing a new direction to accelerate in
new_direction_default = 350 * per_second;
new_direction = new_direction_default;

//this color should never be drawn
color_to_draw = c_white;

//Set the instance for checking nearby enemies to noone initially.
closest_other_tank = noone;
closest_other_block = noone;

//for the flashlight
visible = false;
if (instance_exists(my_turret)){
    my_turret.visible = false;
}

//So that the computer matches the color
//of the warning sign
warning_owner = noone;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>event_inherited();

//so that computers (and their turrets are only visible if you shine a flashlight on them
visible = false;
if (instance_exists(my_turret)){
        my_turret.visible = false;
    }
    
//movement code
if (new_direction &lt;=0){
    new_direction = new_direction_default;
    h_acceleration = choose(0,-3, 3);
    v_acceleration = choose(0,-3, 3);
}    

new_direction -=per_second;
    
//check boundaries
computer_check_boundary();
    
//for detecting enemy computers
closest_other_tank = instance_nearest(tempx, tempy, object_tank_parent);
tempx -= 300;
tempy -= 300;
    
//If they are different instances of the same
//tank_parent_object than point towards it
if (instance_exists(closest_other_tank) &amp;&amp; instance_exists(my_turret) &amp;&amp; closest_other_tank.id != id){
        my_turret.image_angle = point_direction(x, y, closest_other_tank.x, closest_other_tank.y);
        my_turret.direction = point_direction(x,y,closest_other_tank.x,closest_other_tank.y);
} 
    
tempx += 300;
tempy += 300;
    
//code to have tanks shoot at the closest blocks
closest_other_block = instance_nearest(x,y, object_block_arena);
    
if (instance_exists(closest_other_block) &amp;&amp; instance_exists(my_turret)){
    my_turret.image_angle = point_direction(x, y, closest_other_block.x, closest_other_block.y);
    my_turret.direction = point_direction(x,y,closest_other_block.x,closest_other_block.y);
} 
    
//fire bullets every 3 seconds (but only if there is a target-- block or tank).
if((cooldown &lt;=0 &amp;&amp; instance_exists(closest_other_tank) &amp;&amp; closest_other_tank.id != id) || (cooldown &lt;=0 &amp;&amp; instance_exists(closest_other_block))){
    
    //set up so the bullets fire a certain distance from the tank
    x_len = lengthdir_x(image_angle_distance, image_angle);
    y_len = lengthdir_y(image_angle_distance, image_angle);
        
    //target the specific instance being created
    my_bullet = instance_create(x, y, object_bullet);
    my_bullet.image_blend = image_blend; 
   
        
    //if the turret still exists then set the bullet equal to its angle
    if (instance_exists(my_turret)){
         my_bullet.image_angle = my_turret.image_angle;
         my_bullet.direction = my_turret.direction;
         my_bullet.owner = self.id;
         my_bullet.owner_object = object_index;
         bullet_kick(2);
    }
        
    cooldown = 30 * per_second;
}

//create blocks of the same image_blend as the tank
if (block_cooldown &lt;= 0){
        block_cooldown = block_cooldown_default;
        my_block = instance_create(x,y, object_block_arena);
        my_block.image_blend = image_blend;
        my_block.owner = self.id;
    }
    
   
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="object_flashlight">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//if (instance_exists(my_flashlight)){ 
       // if (other.id != my_flashlight.id){
                visible = true;
                //if (instance_exists(my_turret)){
                    my_turret.visible = true;
                    other.image_alpha = .45;
                //}
            //}
    //}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>draw_self();
//for debugging purposes

//draw a line between this tank and the closest other tank that has been
//detected by the tank
if (instance_exists(closest_other_tank) &amp;&amp; closest_other_tank.id != instance_id &amp;&amp; global.debug){
    color_to_draw = closest_other_tank.image_blend;
    draw_line_width_colour(x,y, closest_other_tank.x, closest_other_tank.y, 5, color_to_draw, image_blend); 
}
//draw a line between this tank and the closest other block that has been
//detected by this tank
if (instance_exists(closest_other_block) &amp;&amp; global.debug){
    color_to_draw = closest_other_block.image_blend;
    draw_line_width_colour(x,y, closest_other_block.x, closest_other_block.y, 3, c_white, c_white); 
}

//draw bb
draw_bb();

</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
