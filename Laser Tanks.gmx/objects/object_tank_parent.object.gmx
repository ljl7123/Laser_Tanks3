<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>my_bullet = noone;
image_blend = make_colour_hsv(random(255), 255, 255);

moving = false;
hp = 1;

//cooldown is for the bullet
cooldown = 1 * per_second;

//kinematics
tank_hspeed = 0;
tank_vspeed = 0; 
h_acceleration = 0;
v_acceleration = 0;

//variables used for detecting the nearest tank
//for checking for nearby tanks
closest_other_tank = noone;
tempx = x;
tempy = y;

//create a turret 
x_pos = x + lengthdir_x(50,direction);
y_pos = y + lengthdir_y(50,direction);
my_turret = instance_create(x,y, object_tank_turret);

//create a flashlight (off by default) and pointing to noone
flashlight_on = false;
my_flashlight = noone;

//not sure what this is for
image_angle_distance = 50;

//block code
block_cooldown_default = 450 * per_second;
block_cooldown = block_cooldown_default;
my_block = noone;

//for kickback
opp_angle = 0;



</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>image_angle = arctan(tank_vspeed/tank_hspeed) * 180 / pi;

if (hp &gt;= 10){
 
    
    //destroy the tank's turret
    instance_destroy(my_turret);
    
    //destroy the tank's flashlight
    instance_destroy(my_flashlight);
    
    //play sound effect 
    audio_play_sound(sound_firework, false, 0);  
    
    //create a firework particle effect based on the image_blend of the tank
    effect_create_above(ef_firework, x, y, 1, image_blend);
    
    //destroy the tank
    instance_destroy();
} 


//every step we want the gun to cooldown. This handles it for the player tank, too. 
cooldown -=1 * per_second; 

//kinematics 
//speed in a particual direction increases by a constant each step (acceleration, can be negative)

tank_hspeed = h_acceleration * 1;
tank_vspeed = v_acceleration * 1; 

x += tank_hspeed;  
y += tank_vspeed;

//Set the position, image_blend, direction, and image angle of my turret instance 
//if it still exists
if (instance_exists(my_turret)){
    my_turret.x = x;
    my_turret.y = y;
    my_turret.image_blend = image_blend;
}

//flashlight code
if (instance_exists(my_flashlight)){
    my_flashlight.x = x; 
    my_flashlight.y = y; 
    
    if (instance_exists(my_turret)){
        my_flashlight.image_angle = my_turret.image_angle;
        my_flashlight.direction = my_turret.direction;
    }
}

//so that the tanks can't place infinite blocks
block_cooldown -= per_second;

//this causes the acceleration to go to zero
//from the 'appropriate direction' on the number line
  if (v_acceleration != 0){
    if (v_acceleration &gt; 0){
        v_acceleration -= per_second;
        if (v_acceleration &lt; .1){
            v_acceleration = 0;
        }
    } else {
         v_acceleration += per_second;
         if (v_acceleration &gt; -.1){
            v_acceleration = 0; //zeros it so it doesn't go to far in other direction
        }
    }//end else (less than 0)
}//end if 

if (h_acceleration != 0){
    if (h_acceleration &gt; 0){
        if (h_acceleration &lt; .1){
            h_acceleration = 0;
        }
        h_acceleration -= per_second;
    } else {
         h_acceleration += per_second;
         if (h_acceleration &gt; -.1){
            h_acceleration = 0;
         }
    }
}



 

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="object_tank_parent">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//If a parent tank colides with another parent_tank (ie. a computer
//(or the player), then destroy both instances and cause an explostion
//by setting their damage to 10.
hp = 10;





</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="object_block_parent">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (other.object_index == object_block_fragment &amp;&amp; other.image_blend != image_blend){
    hp = 10;

}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (moving){
    draw_self();
} else {
    //If it is not moving, draw the first frame of the sprite
    //Set the color, otherwise we get a white tank (first frame of sprite)
    draw_sprite_ext( sprite_tank, 0, x, y, 1, 1, 0, image_blend, 1);
}

</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
