<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>sprite_laser</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>owner = noone;
owner_object = noone;
time_alive = 0;

//play laser sound when the instance is created
audio_play_sound(sound_laser_right, 0,0);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//Set the color of the instance if its owner exists
if (owner!= noone &amp;&amp; instance_exists(owner)){
    image_blend = owner.image_blend;
}   

//Destroy the laser if it goes out of bounds
out_of_bounds();

//if the time alive goes high enough, have the laser destroy itself
if (time_alive &gt;= 30 * per_second){
   instance_destroy(self);
}

//increase the time alive every second
time_alive += per_second;

//collision with a tank behavior
collided_tank = instance_place(x,y,object_tank_parent);
if (instance_exists(collided_tank) &amp;&amp; collided_tank.id != owner){
     create_score(20, collided_tank.x, collided_tank.y);
     collided_tank.hp = 10 //destroy the enemy tank by setting it's hp to 0 and this will trigger it's death
     //in step event
     
     instance_destroy(self);//kys after doing everything else
     
} // end check for collided tank who is not owner

//display combat info/kill info
kill("lasered")

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="object_block_arena">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//decrease the health of the block to 5. In other words, destroy the block
//wrap in an if instance exists, just in case, but technically it should be there
//because just colided with it
if (instance_exists(other)){
    create_score(5, other.x, other.y);
    other.hp -= 5;
    audio_play_sound(sound_enemy_block_shot, 0 , 0);
    
} 

</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
