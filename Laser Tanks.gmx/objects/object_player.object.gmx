<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>sprite_tank</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>object_tank_parent</parentName>
  <maskName>sprite_tank_player</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>event_inherited();
//start playing the terrence music
//Play Terrence background audio
audio_sound_gain(sound_terrence_music, .1, 0);
audio_play_sound(sound_terrence_music, 0 , true);

//make color selected from menu
image_blend = global.colors[global.color_counter];

//basic player properties
cooldown = 10 * per_second;
laser_cooldown = 50 * per_second;
image_angle_distance = 75;

//block variables
block_cooldown_default = 10 * per_second;
block_cooldown = block_cooldown_default;

//heartbeat
heartbeat_strength = .05;
heartbeat_strength_increment = .1;
heartbeat_timer_default = 30 * per_second; //if 60fps then heartbeat every two seconds 
heartbeat_timer = 0; 
heartbeat_length_default = 1.001 * per_second;//if 60 fps then heartbeat leasts a quarter of a second
heartbeat_length = heartbeat_length_default;

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//inherit behavior from object_tank_parent 
event_inherited();


//for each check if wasd is being held down.
if (keyboard_check(ord("W"))){
   v_acceleration = -5;
} else if (keyboard_check(ord("A"))){
   h_acceleration = -5;
} else if (keyboard_check(ord("S"))){
  v_acceleration = 5;
} else if (keyboard_check(ord("D"))){
  h_acceleration = 5;
}

//point the image toward the left analogue stick 
if (instance_exists(my_turret)){
        my_turret.image_angle = point_direction(x, y, mouse_x, mouse_y);  
        my_turret.direction = point_direction(x, y, mouse_x, mouse_y);
}

//create a bullet that shoots from the end of the barrel
if ((mouse_check_button(mb_left) || gamepad_button_check(0,gp_shoulderrb)) &amp;&amp;  cooldown &lt;= 0){
    if (instance_exists(my_turret)){
       my_bullet = instance_create(x, y, object_bullet);
       my_bullet.owner = self.id; 
       my_bullet.owner_object = self.object_index;
       my_bullet.image_angle = my_turret.image_angle;
       my_bullet.direction = my_turret.direction;
       bullet_kick(2);
    }
    //reset the cooldown after every fire. (Cooldown is decreased every step) in the parent.
    cooldown = 10 * per_second;
}

//create a laser (more powerful, secondary attack)
if (mouse_check_button(mb_right) &amp;&amp; laser_cooldown &lt;= 0){
    my_laser = instance_create(x,y, object_laser);
    my_laser.owner = self.id;
    my_laser.owner_object = self.object_index;
    my_laser.image_angle = my_turret.image_angle;
    my_laser.direction = my_turret.direction;
    bullet_kick(10);
    //reset the cooldown
    laser_cooldown = 50 * per_second;
}
//decrease the cooldown
laser_cooldown -= per_second;


//check if the player pressed a on the gamepad and create a block
if (gamepad_button_check(0, gp_face1) || keyboard_check(vk_space) &amp;&amp; block_cooldown &lt;=0){
    block_cooldown = block_cooldown_default;
    my_block = instance_create(x, y, object_block_arena);
    my_block.owner = self.id;
    my_block.image_blend = image_blend;
}

if (gamepad_button_check(0, gp_face3) || keyboard_check(ord("Q")) &amp;&amp; instance_position(x,y, object_block_arena) != noone ){
    instance_destroy(instance_position(x,y, object_block_arena));
}

//check player boundaries
check_boundaries();

//Heartbeat: Right now this is configured for the gamepad
if (heartbeat_timer &lt;=0){
    heartbeat_timer = heartbeat_timer_default; //multiplying this by hp makes the arythmia go away, but it doesn't increase the beats
    heartbeat_strength = (hp / 20);
    gamepad_set_vibration(0, heartbeat_strength, heartbeat_strength);
    heartbeat_length -= per_second;
    
    if (heartbeat_length &lt;= 0){
        gamepad_set_vibration(0, 0, 0);
        heartbeat_length = heartbeat_length_default;
        audio_sound_gain(sound_heartbeat_3, .01, 0);
        audio_sound_pitch(sound_heartbeat_3, (heartbeat_strength) + 1);
        audio_play_sound(sound_heartbeat_3, 0 ,0)
    }
    
}
heartbeat_timer -=  per_second; 

//flashlight
if (keyboard_check_released(ord("F"))){
    
    if (flashlight_on == false){
        audio_play_sound(sound_flashlight_on, 0 , 0);
        my_flashlight = instance_create(x,y,object_flashlight);
        my_flashlight.owner = self;
        flashlight_on = true;
    } else {
        flashlight_on = false;  
        audio_play_sound(sound_flashlight_off, 0 , 0);
        instance_destroy(my_flashlight);    
    }
}

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>draw_self();
//turn off the cursor
window_set_cursor(cr_none);

//draw the player outer crosshair 
draw_circle_colour(mouse_x, mouse_y, 25, image_blend, image_blend, true);
//red dot
draw_circle_colour(mouse_x, mouse_y, 5, c_red, c_red, false);

//the cross
draw_line_colour(mouse_x-50, mouse_y, mouse_x+50, mouse_y, image_blend, image_blend);
draw_line_colour(mouse_x, mouse_y-50, mouse_x, mouse_y+50, image_blend, image_blend);

//the laser sight
draw_line_colour(x, y, mouse_x, mouse_y, image_blend, image_blend);

//bounding box 
draw_bb();

//draw player name above their head with an arrow
draw_triangle_colour(x, y - 100, x - 25, y - 150, x + 25, y - 150, image_blend, image_blend,image_blend, false);
//text busywork
draw_set_halign(fa_center);
draw_set_valign(fa_middle);
draw_set_font(font_pixel);
//draw the name
draw_set_colour(image_blend);
draw_text_ext_transformed(x, y - 200, global.player_name, 100, 1000, .5, .5, 0);
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
