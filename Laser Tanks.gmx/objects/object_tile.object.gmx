<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>sprite_tile</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//Deprecated in GameMaker 2
depth = 1000000;

//Tile is invisible when the game starts but 
//after collision alpha is set to one and decreases
//by alpha_decrease_constant every step
default_alpha = 0;
image_alpha = default_alpha;
alpha_decrease_constant = .75; 

//fluxuating floor pitch intialization variables 
//if the default_audio value is too low, then 
//the sound can't be heard
audio_increase_constant = .1;
default_audio = 1;
audio_pitch = default_audio;
audio_cap = 2;
soundable = false;

//Make the floor sound play at a quarter of its normal volume
audio_sound_gain(sound_floor_step, .25, 0);

//glow initialization
glow_init(.5);

//intialization for whether or not the tile can glow
glowable = false;
active_title_block = false;

//initially the tile does not have a block
my_block = noone;



</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/*If there's no block colliding with
the tile, then decrease the opacity 
at a certain rate*/ 
if (!place_meeting(x,y, object_block_parent)){
    image_alpha -= alpha_decrease_constant * per_second/ 1.5;
}
/*If the player tank is not colliding with this instance of the 
//tile then set the ability to make sound to true.
*/
if (!place_meeting(x,y, object_player)){
    soundable = true;
}

//If we reach our cap then we want to start decreasing the audio
// OR if we reach the default (minimum) then we want to start increasing 
//the audio (a.k.a. flip the sign again). Because the player can step on multiple
//tiles at once, we have to set it equal to a value greater than or less than the respective
//checks and then flip the sign.
if (object_tile.audio_pitch &gt; object_tile.audio_cap){
    audio_pitch = audio_cap;
    object_tile.audio_increase_constant = -object_tile.audio_increase_constant;
} else if (object_tile.audio_pitch &lt; object_tile.default_audio){
    audio_pitch = default_audio;
    object_tile.audio_increase_constant = -object_tile.audio_increase_constant;
}

//determines whether or not the blocks can glow
if (glowable &amp;&amp; active_title_block ){
    image_alpha = glow_value;   
}

//glow script
glow();

//destroy the tile if it is outside of the view         
if (x &gt; (view_xview[0] + view_wview[0]) || x &lt; view_xview){
    instance_destroy(self);
}

if (y &gt; (view_yview[0] + view_hview[0]) || y &lt; view_yview ){
    instance_destroy(self);
}         

//snap to grid (only if in arena)
move_snap(sprite_width, sprite_height);

//if it colides with the text, do this
if (place_meeting(x,y,object_menu_text)){
    image_alpha = .5;
    image_blend = c_red;
}

glowable = false;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="object_bullet">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>image_alpha = .05;
image_blend = other.image_blend;

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="object_tank_parent">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//Set the color of the tile equal to the color
//of the particular tank object that created it
image_blend = other.image_blend;
image_alpha = default_alpha + .5;

//We only want to play the sound once, when the player 
//steps on the tile, but we want them to be able to reactivate it
//when they step back on. If you set presing = true anywhere else in the step
//or collision even, then it plays a terrfiyingly, awful noise.
//Could also put this code for the player in a seperate collision event.
if (soundable &amp;&amp; instance_exists(object_player) &amp;&amp; other.id == object_player.id){
    audio_play_sound(sound_floor_step, -1, 0);
    audio_sound_pitch(sound_floor_step, audio_pitch);
    //We want to increase the pitch for all tiles.
    object_tile.audio_pitch += object_tile.audio_increase_constant;
    soundable = false;
}


</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="object_block_parent">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>my_block = other;
image_blend = my_block.image_blend;

// fragment or title one block behavior
    if ( other.object_index == object_block_fragment ||  other.object_index == object_block_title){
         image_alpha = .1;   
    } else if ( other.object_index == object_block_arena){
         active_title_block = true;
         glowable = true;
    } 



</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
